import asyncio
import datetime
import json
import os.path

import random

from aiogram import F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
import aioschedule
from aiogram.types import (
    Message,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery,
    FSInputFile,
)

from database import User
from helpers import get_user
from settings import *

TASKS = [
    "–ë–µ—Ä–ø–∏ (10–±)",
    "10 –ø–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏–π –Ω–∞ –≤—ã—Å–æ–∫–æ–π –ø–µ—Ä–µ–∫–ª–∞–¥–∏–Ω–µ (7–±)",
    "10 –ë–µ—Ä–ø–∏ (7–±)",
    "15 –ø–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏–π –Ω–∞ –≤—ã—Å–æ–∫–æ–π –ø–µ—Ä–µ–∫–ª–∞–¥–∏–Ω–µ (10–±)",
    "15 –ø—Ä–∏—Å–µ–¥–∞–Ω–∏–π (9–±)",
    "10 –ø—Ä–∏—Å–µ–¥–∞–Ω–∏–π (7–±)",
    "3 –º–∏–Ω—É—Ç –ø–ª–∞–Ω–∫–∏ –Ω–∞ –ª–æ–∫—Ç—è—Ö (6–±)",
    "5 –º–∏–Ω—É—Ç –ø–ª–∞–Ω–∫–∏ –Ω–∞ –ª–æ–∫—Ç—è—Ö (10–±)",
    "10 –æ—Ç–∂–∏–º–∞–Ω–∏–π –Ω–∞ –±—Ä—É—Å—å—è—Ö (10–±)",
    "10 –æ—Ç–∂–∏–º–∞–Ω–∏–π –≤ —É–ø–æ—Ä–µ –ª–µ–∂–∞ (7–±)",
    "15 –æ—Ç–∂–∏–º–∞–Ω–∏–π –≤ —É–ø–æ—Ä–µ –ª–µ–∂–∞ (10–±)",
    "15 –æ—Ç–∂–∏–º–∞–Ω–∏–π –Ω–∞ –±—Ä—É—Å—å—è—Ö (12–±)"
]

async def add_tasks():
    users = session.query(User).all()
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–°–º–æ—Ç—Ä–µ—Ç—å", callback_data="tasks")]])
    for user in users:
        my_simple_tasks = random.choices(TASKS, k=3)
        user.tasks = json.dumps(my_simple_tasks)
        session.commit()
        await bot.send_message(user.id, "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã.", reply_markup=keyboard)

async def add_tasks_to(user_id):
    user = get_user(user_id)
    my_simple_tasks = random.choices(TASKS, k=3)
    user.tasks = json.dumps(my_simple_tasks)
    session.commit()


async def run_tick():
    print("start ticking")
    while True:
        await aioschedule.run_pending()
        await asyncio.sleep(1)


class States(StatesGroup):
    editing_name = State()
    editing_age = State()
    editing_bio = State()
    editing_tags = State()


def check_match(user1: str, user2: str) -> bool:
    tags1 = json.loads(user1 or "[]")
    tags2 = json.loads(user2 or "[]")
    for tag in tags1:
        if tag in tags2:
            return True
    return False


def get_tags_keyboard(user_id):
    user = get_user(user_id)
    if user:
        tags = json.loads(user.tags or "[]")
        keys = []
        for tag in available_tags:
            if tag in tags:
                keys.append([InlineKeyboardButton(text=f"{tag}‚úÖ", callback_data=tag)])
            else:
                keys.append([InlineKeyboardButton(text=f"{tag}‚ùå", callback_data=tag)])
        keys.append([InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ", callback_data="–≥–æ—Ç–æ–≤–æ")])
        return InlineKeyboardMarkup(inline_keyboard=keys)


@dp.message(States.editing_name)
async def set_name(message: Message, state: FSMContext):
    user = get_user(message.chat.id)
    if user:
        user.name = message.text
        session.commit()
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="edit")]
            ]
        )
        await message.answer("–ò–º—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.", reply_markup=keyboard)
        await state.clear()


@dp.message(States.editing_age)
async def set_age(message: Message, state: FSMContext):
    user = get_user(message.chat.id)
    if user:
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="edit")]
            ]
        )
        user.age = message.text
        session.commit()
        await message.answer("–í–æ–∑—Ä–∞—Å—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.", reply_markup=keyboard)
        await state.clear()


@dp.callback_query(lambda x: 'set_score' in x.data)
async def set_score(query: CallbackQuery):
    user = get_user(query.message.chat.id)
    if user:
        ind = int(query.data.split('_')[2])
        my_simple_tasks = json.loads(user.tasks or "[]")
        try:
            new_score = my_simple_tasks[ind].split('(')[-1].strip('–±)')
        except IndexError:
            new_score = 0
        user.score += int(new_score)
        session.commit()
        await query.answer()
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–í –º–µ–Ω—é", callback_data="menu")]
            ])
        try:
            my_simple_tasks.pop(int(ind))
            user.tasks = json.dumps(my_simple_tasks)
            session.commit()
        except IndexError:
            pass
        await query.message.edit_text(f"–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {new_score} –±–∞–ª–ª–æ–≤.", reply_markup=keyboard)


@dp.message(States.editing_bio)
async def set_bio(message: Message, state: FSMContext):
    user = get_user(message.chat.id)
    if user:
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="edit")]
            ]
        )
        user.desription = message.text
        session.commit()
        await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.", reply_markup=keyboard)
        await state.clear()


@dp.callback_query(States.editing_tags)
async def set_tags(query: CallbackQuery, state: FSMContext):
    user = get_user(query.message.chat.id)
    if user:
        tags: list = json.loads(user.tags or "[]")
        if (
                query.data not in tags
                and query.data.lower() != "–¥—Ä—É–≥–æ–µ"
                and query.data.lower() != "–≥–æ—Ç–æ–≤–æ"
        ):
            tags.append(query.data)
        elif query.data.lower() != "–≥–æ—Ç–æ–≤–æ":
            tags.remove(query.data)
        elif query.data.lower() == "–≥–æ—Ç–æ–≤–æ":
            await state.clear()
            return await back_to_menu(query)

        user.tags = json.dumps(tags)
        session.commit()
        await query.answer()
        await query.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —É–≤–ª–µ—á–µ–Ω–∏—è:", reply_markup=get_tags_keyboard(user.id)
        )


@dp.message(Command("start"))
async def start(message: Message):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—èüì∞", callback_data="news")],
            [
                InlineKeyboardButton(
                    text="–ù–∞–π—Ç–∏ –¥—Ä—É–≥–∞ –¥–ª—è –∑–∞–Ω—è—Ç–∏–πüòä", callback_data="find"
                )
            ],
            [InlineKeyboardButton(text="–ü—Ä–æ—Ñ–∏–ª—åüë§", callback_data="profile")],
            [InlineKeyboardButton(text="–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è", callback_data="tasks")],
        ]
    )
    user = get_user(message.chat.id)
    if user:
        return await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {user.name}!", reply_markup=keyboard)
    user = User(
        id=message.chat.id,
        name=message.from_user.full_name,
        link=f"https://t.me/{message.from_user.username}",
    )
    session.add(user)
    session.commit()
    await add_tasks_to(user.id)
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç!", reply_markup=keyboard)


@dp.callback_query(F.data == "menu")
async def back_to_menu(query: CallbackQuery):
    await query.answer()
    message = query.message
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—èüì∞", callback_data="news")],
            [
                InlineKeyboardButton(
                    text="–ù–∞–π—Ç–∏ –¥—Ä—É–≥–∞ –¥–ª—è –∑–∞–Ω—è—Ç–∏–πüòä", callback_data="find"
                )
            ],
            [InlineKeyboardButton(text="–ü—Ä–æ—Ñ–∏–ª—åüë§", callback_data="profile")],
            [InlineKeyboardButton(text="–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è", callback_data="tasks")],
        ]
    )
    user = get_user(message.chat.id)
    if user:
        return await message.edit_text(f"–ü—Ä–∏–≤–µ—Ç, {user.name}!", reply_markup=keyboard)


@dp.callback_query(lambda x: "find" in x.data)
async def find(query: CallbackQuery):
    user = get_user(query.message.chat.id)
    await query.answer()
    if user:
        declines = json.loads(user.declines or "[]")
        index = 0
        if "_" in query.data:
            index = int(query.data.split("_")[1])
        matches = (
            session.query(User)
            .where(User.age <= user.age + 2)
            .where(user.age - 2 <= User.age)
            .where(user.id != User.id)
            .all()
        )
        match = []
        for matched_user in matches:
            if (
                    check_match(user.tags, matched_user.tags)
                    and matched_user.id not in declines
            ):
                match.append(matched_user)
        buttons = []
        if index > 0:
            buttons.append(
                InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"find_{index - 1}")
            )
        if index < len(match) - 1:
            buttons.append(
                InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"find_{index + 1}")
            )
        matched_user: User | bool = match[index] if match else False
        if matched_user:
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    buttons,
                    [
                        InlineKeyboardButton(
                            text="–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ–∑–∞–Ω–∏–º–∞—Ç—å—Å—è",
                            callback_data=f"ask_{match[index].id}",
                        )
                    ],
                    [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=f"menu")],
                ]
            )
            await query.message.edit_text(
                f"<b>{matched_user.name}</b>, <u>{matched_user.age}</u>\n–û–ø–∏—Å–∞–Ω–∏–µ: <i>{matched_user.desription}</i>\n–£–≤–ª–µ—á–µ–Ω–∏—è: {', '.join(json.loads(matched_user.tags or '[]')) or None}",
                parse_mode="HTML",
                reply_markup=keyboard,
            )
        else:
            markup = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=f"menu")]
                ]
            )
            await query.message.answer(
                "–ù–∏–∫–æ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å.\n\n"
                "–ï—Å–ª–∏ –≤—ã –µ—â—ë –Ω–µ –∑–∞–ø–æ–ª–Ω—è–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å - –∑–∞–ø–æ–ª–Ω—è–π—Ç–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å —Å—é–¥–∞üòÉ\n\n"
                "–ï—Å–ª–∏ –≤—ã —É–∂–µ –∑–∞–ø–æ–ª–Ω–∏–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å - –ø–æ–¥–æ–∂–¥–∏—Ç–µ –ø–æ—è–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–πüòÅ",
                reply_markup=markup,
            )


@dp.callback_query(F.data == "profile")
async def profile(query: CallbackQuery):
    await query.answer()
    text = ""
    user = get_user(query.message.chat.id)
    markup = None
    if user:
        markup = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å", callback_data=f"edit")],
                [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=f"menu")],
            ]
        )
        text = (
            f"–ò–º—è: <b>{user.name}</b>\n"
            f"–í–æ–∑—Ä–∞—Å—Ç: <b>{user.age}</b>\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: <b>{user.desription}</b>\n"
            f"–£–≤–ª–µ—á–µ–Ω–∏—è: <b>{', '.join(json.loads(user.tags or '[]')) if json.loads(user.tags or '[]') else None}</b>\n".replace(
                "None", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
            )
        )
        text += f"–ë–∞–ª–ª—ã: <b>{user.score}</b>"
    if text:
        return await query.message.edit_text(
            text, reply_markup=markup, parse_mode="HTML"
        )


@dp.callback_query(lambda x: "tasks" in x.data)
async def tasks(query: CallbackQuery):
    await query.answer()
    user = get_user(query.message.chat.id)
    index = 0
    if "_" in query.data:
        index = int(query.data.split("_")[1])
    buttons = []
    my_simple_tasks = json.loads(user.tasks or "[]")
    if index > 0:
        buttons.append(
            InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"tasks_{index - 1}")
        )
    if index < len(my_simple_tasks) - 1:
        buttons.append(
            InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"tasks_{index + 1}")
        )
    if not my_simple_tasks:
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–í –º–µ–Ω—é", callback_data="menu")]
            ]
        )
        return await query.message.edit_text("–ù–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–¥–∞–Ω–∏–π –±–æ–ª—å—à–µ –Ω–µ—Ç.", reply_markup=keyboard)
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            buttons,
            [
                InlineKeyboardButton(
                    text="–í—ã–ø–æ–ª–Ω–∏–ª",
                    callback_data=f"set_score_{index}",
                ),
                InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=f"menu")
            ],
            [InlineKeyboardButton(text="–ö–∞–∫ –¥–µ–ª–∞—Ç—å?", callback_data=f"work_{index}")]
        ]
    )
    await query.message.edit_text(f"<b>{my_simple_tasks[index]}</b>", parse_mode="HTML", reply_markup=keyboard)


@dp.callback_query(lambda q: "edit" in q.data)
async def edit_profile(query: CallbackQuery, state: FSMContext):
    await query.answer()
    user = get_user(query.message.chat.id)
    if not user:
        return await query.message.answer("–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–ø–∏—à–∏—Ç–µ /start")
    if "_" not in query.data:
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–ò–º—è", callback_data="edit_name")],
                [InlineKeyboardButton(text="–í–æ–∑—Ä–∞—Å—Ç", callback_data="edit_age")],
                [InlineKeyboardButton(text="–û–ø–∏—Å–∞–Ω–∏–µ", callback_data="edit_bio")],
                [InlineKeyboardButton(text="–£–≤–ª–µ—á–µ–Ω–∏—è", callback_data="edit_tags")],
                [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="profile")],
            ]
        )
        return query.message.edit_text("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=keyboard)
    if "_" in query.data:
        messages = {
            "name": "–í–≤–µ–¥–∏—Ç–µ –∏–º—è:",
            "age": "–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç:",
            "bio": "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:",
            "tags": "–í—ã–±–µ—Ä–∏—Ç–µ —É–≤–ª–µ—á–µ–Ω–∏—è:",
        }
        data = query.data.split("_")[1]
        keyboard = get_tags_keyboard(user.id) if data == "tags" else None
        await query.message.edit_text(messages[data], reply_markup=keyboard)
        await state.set_state(getattr(States, f"editing_{data}"))


@dp.callback_query(lambda x: "ask" in x.data)
async def ask(query: CallbackQuery):
    await query.answer()
    data = query.data.split("_")[1]
    ask_user = get_user(data)
    user = get_user(query.message.chat.id)
    redirects = {1234567: "5237472052", 12345: "5237472052"}
    if ask_user:
        declines = json.loads(user.declines or "[]")
        if ask_user.id not in declines:
            declines.append(ask_user.id)
        user.declines = json.dumps(declines)
        session.commit()
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="–ü—Ä–∏–Ω—è—Ç—å ‚úÖ", callback_data=f"answer_{user.id}"
                    ),
                    InlineKeyboardButton(
                        text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å ‚ùå", callback_data=f"delete_decline_{user.id}"
                    ),
                ]
            ]
        )
        keyboard1 = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data=f"find")]
            ]
        )
        await bot.send_message(
            redirects.get(ask_user.id) or ask_user.id,
            f"–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ:\n<b>{user.name}</b>, <u>{user.age}</u>\n–û–ø–∏—Å–∞–Ω–∏–µ: <i>{user.desription}</i>\n–£–≤–ª–µ—á–µ–Ω–∏—è: {', '.join(json.loads(user.tags or '[]')) or None}",
            parse_mode="HTML",
            reply_markup=keyboard,
        )
        await query.message.edit_text("–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.", reply_markup=keyboard1)


@dp.callback_query(lambda x: "answer" in x.data)
async def answer(query: CallbackQuery):
    await query.answer()
    if "_" in query.data:
        data = query.data.split("_")
        user = get_user(query.message.chat.id)
        answer_user = get_user(data[1])

        declines = json.loads(answer_user.declines or "[]")
        if user.id not in declines:
            declines.append(user.id)
        answer_user.declines = json.dumps(declines)
        declines = json.loads(user.declines or "[]")
        if answer_user.id not in declines:
            declines.append(answer_user.id)
        user.declines = json.dumps(declines)
        session.commit()

        keyboard_user = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥", url=answer_user.link),
                    InlineKeyboardButton(text="–ú–µ–Ω—é", callback_data="menu"),
                ]
            ]
        )
        keyboard_answer_user = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥", url=user.link),
                    InlineKeyboardButton(text="–ú–µ–Ω—é", callback_data="menu"),
                ]
            ]
        )
        await query.message.answer(
            "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥, —á—Ç–æ–±—ã –¥–æ–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è –æ –º–µ—Å—Ç–µ –∏ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–Ω—è—Ç–∏–π.",
            reply_markup=keyboard_user,
        )

        await bot.send_message(
            answer_user.id,
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.name} —Å–æ–≥–ª–∞—Å–∏–ª—Å—è –ø–æ–∑–∞–Ω–∏–º–∞—Ç—å—Å—è! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥, —á—Ç–æ–±—ã –¥–æ–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è –æ –º–µ—Å—Ç–µ –∏ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–Ω—è—Ç–∏–π.",
            reply_markup=keyboard_answer_user,
        )
        await query.message.edit_text("–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞.")


@dp.callback_query(lambda x: "delete" in x.data)
async def delete(query: CallbackQuery):
    await query.answer()
    if "_" in query.data:
        data = query.data.split("_")
        if data[1] == "decline":
            user = get_user(query.message.chat.id)
            decline_user = get_user(data[2])
            declines = json.loads(decline_user.declines or "[]")
            if decline_user.id not in declines:
                declines.append(user.id)
            decline_user.declines = json.dumps(declines)
            session.commit()
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="–í –º–µ–Ω—é", callback_data="menu")]
                ]
            )
            await query.message.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.", reply_markup=keyboard)
    await query.message.delete()


@dp.callback_query(lambda x: "news" in x.data)
async def display_news(query: CallbackQuery):
    await query.answer()
    index = 0
    if "_" in query.data:
        await query.message.delete()
        index = int(query.data.split("_")[1])
    if not os.path.exists("messages.json"):
        return await query.message.answer(
            "–ü–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π. –ö–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω–∏ –ø–æ—è–≤—è—Ç—Å—è - —è –≤–∞—Å –æ–ø–æ–≤–µ—â—ÉüòÉ"
        )
    news = json.loads(open("messages.json", encoding="utf-8").read() or "{}")
    if not news:
        return await query.message.answer(
            "–ü–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π. –ö–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω–∏ –ø–æ—è–≤—è—Ç—Å—è - —è –≤–∞—Å –æ–ø–æ–≤–µ—â—ÉüòÉ"
        )
    index = index % len(news)
    news = news[index]
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"news_{index - 1}"),
                InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"news_{index + 1}"),
            ],
            [InlineKeyboardButton(text="–ó–∞–∫—Ä—ã—Ç—å‚ùå", callback_data=f"delete")],
        ]
    )
    if news.get("files"):
        return await query.message.answer_photo(
            FSInputFile(news["files"], "rb"),
            caption=news["message"][:1024],
            reply_markup=keyboard,
        )
    else:
        return await query.message.answer(news["message"], reply_markup=keyboard)


async def on_startup():
    asyncio.create_task(run_tick())


async def run():
    print("started")
    await add_tasks()

    dp.startup.register(on_startup)
    await dp.start_polling(bot)
    print("end")


if __name__ == "__main__":
    print("starting bot...")
    aioschedule.every().day.at("10:00").do(add_tasks)
    asyncio.run(run())
